CONSTTK const
CHARTK char
IDENFR __timee
ASSIGN =
CHARCON *
SEMICN ;
CONSTTK const
CHARTK char
IDENFR __divide
ASSIGN =
CHARCON /
SEMICN ;
INTTK int
IDENFR dp
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
COMMA ,
LBRACE {
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR vztd
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
SEMICN ;
INTTK int
IDENFR ans
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR res
ASSIGN =
MINU -
INTCON 1
SEMICN ;
VOIDTK void
IDENFR fuck
LPARENT (
INTTK int
IDENFR t
RPARENT )
LBRACE {
IDENFR vztd
LBRACK [
IDENFR t
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR no_ret_func
LPARENT (
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 99
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 18373665
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR vztd
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fuck
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR vztd
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR fuck
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR vztd
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
IDENFR no_ret_func
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR dp
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
SWITCHTK switch
LPARENT (
IDENFR dp
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
CASETK case
INTCON 99
COLON :
PRINTFTK printf
LPARENT (
STRCON Success
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
LBRACE {
RBRACE }
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR vztd
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
LBRACE {
CASETK case
INTCON 0
COLON :
PRINTFTK printf
LPARENT (
STRCON Success2222
RPARENT )
SEMICN ;
CASETK case
INTCON 1
COLON :
LBRACE {
RBRACE }
DEFAULTTK default
COLON :
LBRACE {
RBRACE }
RBRACE }
WHILETK while
LPARENT (
IDENFR dp
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
LSS <
INTCON 2
RPARENT )
LBRACE {
IDENFR dp
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 2
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR dp
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR ans
ASSIGN =
PLUS +
INTCON 2
PLUS +
INTCON 3
PLUS +
INTCON 4
PLUS +
IDENFR ans
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR ans
RPARENT )
SEMICN ;
IDENFR res
ASSIGN =
MINU -
INTCON 1
MULT *
INTCON 2
MULT *
IDENFR res
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR res
RPARENT )
SEMICN ;
RBRACE }
