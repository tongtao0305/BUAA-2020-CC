INTTK int
IDENFR a
ASSIGN =
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
MINU -
INTCON 4
SEMICN ;
CHARTK char
IDENFR arr_1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
CHARCON *
COMMA ,
CHARCON /
RBRACE }
SEMICN ;
INTTK int
IDENFR arr_2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 11
COMMA ,
INTCON 12
RBRACE }
COMMA ,
LBRACE {
INTCON 11
COMMA ,
INTCON 12
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR pro_3
LPARENT (
INTTK int
IDENFR para_1
COMMA ,
INTTK int
IDENFR para_2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR para_1
GEQ >=
IDENFR para_2
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR m
COMMA ,
IDENFR n
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373089
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR m
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
IDENFR pro_3
LPARENT (
IDENFR m
COMMA ,
IDENFR n
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
INTCON 2
MULT *
IDENFR i
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
NEQ !=
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
INTCON 3
MULT *
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 3
SEMICN ;
IDENFR i
GRE >
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
INTCON 4
MULT *
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
