INTTK int
IDENFR boo
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR foo
LPARENT (
INTTK int
IDENFR a
COMMA ,
CHARTK char
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR c
SEMICN ;
RETURNTK return
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR err
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON something went wrong in if statement
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR int_initialized_1
ASSIGN =
INTCON 12
SEMICN ;
INTTK int
IDENFR int_initialized_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR int_initialized_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
RBRACE }
RBRACE }
SEMICN ;
CHARTK char
IDENFR char_initialized_1
ASSIGN =
CHARCON r
SEMICN ;
CHARTK char
IDENFR char_initialized_2
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
CHARCON a
COMMA ,
CHARCON b
COMMA ,
CHARCON c
RBRACE }
SEMICN ;
CHARTK char
IDENFR char_initialized_3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
CHARCON d
COMMA ,
CHARCON e
COMMA ,
CHARCON f
RBRACE }
COMMA ,
LBRACE {
CHARCON x
COMMA ,
CHARCON y
COMMA ,
CHARCON z
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 78066014
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON int_initialized_1 = 
COMMA ,
IDENFR int_initialized_1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR err
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR j
LEQ <=
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON int_initialized_2[0] = 
COMMA ,
IDENFR int_initialized_2
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR err
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON int_initialized_2[2] = 
COMMA ,
IDENFR int_initialized_2
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR err
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR j
LSS <
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON char_initialized_3[0][0] = 
COMMA ,
IDENFR char_initialized_3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR err
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
IDENFR j
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON char_initialized_3[1][2] = 
COMMA ,
IDENFR char_initialized_3
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR err
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
SCANFTK scanf
LPARENT (
IDENFR ch
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON newly scanned char ch : 
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON newly scanned int i : 
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON boo 
COMMA ,
IDENFR boo
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON foo 
COMMA ,
IDENFR foo
LPARENT (
INTCON 90
COMMA ,
CHARCON a
RPARENT )
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
