CHARTK char
IDENFR ma
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR na
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR c
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 5
COMMA ,
INTCON 6
RBRACE }
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
VOIDTK void
IDENFR f1
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR top2
ASSIGN =
CHARCON b
SEMICN ;
CHARTK char
IDENFR L
ASSIGN =
CHARCON 5
SEMICN ;
RBRACE }
CHARTK char
IDENFR f2
LPARENT (
CHARTK char
IDENFR j
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR top3
ASSIGN =
CHARCON c
SEMICN ;
RETURNTK return
LPARENT (
CHARCON c
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR f3
LPARENT (
INTTK int
IDENFR r
COMMA ,
INTTK int
IDENFR s
RPARENT )
LBRACE {
INTTK int
IDENFR t
SEMICN ;
IDENFR t
ASSIGN =
IDENFR s
SEMICN ;
IFTK if
LPARENT (
IDENFR r
GEQ >=
IDENFR s
RPARENT )
IFTK if
LPARENT (
IDENFR r
EQL ==
IDENFR s
RPARENT )
SEMICN ;
ELSETK else
IDENFR t
ASSIGN =
IDENFR r
SEMICN ;
LBRACE {
RETURNTK return
LPARENT (
MINU -
IDENFR t
PLUS +
IDENFR t
MULT *
INTCON 2
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR f4
LPARENT (
INTTK int
IDENFR left
COMMA ,
INTTK int
IDENFR right
COMMA ,
CHARTK char
IDENFR ysf
RPARENT )
LBRACE {
SWITCHTK switch
LPARENT (
IDENFR ysf
RPARENT )
LBRACE {
CASETK case
CHARCON +
COLON :
RETURNTK return
LPARENT (
PLUS +
IDENFR left
PLUS +
IDENFR right
RPARENT )
SEMICN ;
CASETK case
CHARCON -
COLON :
RETURNTK return
LPARENT (
IDENFR left
MINU -
IDENFR right
PLUS +
IDENFR f3
LPARENT (
LPARENT (
IDENFR left
RPARENT )
COMMA ,
IDENFR right
RPARENT )
MINU -
IDENFR f3
LPARENT (
LPARENT (
IDENFR left
RPARENT )
COMMA ,
IDENFR right
RPARENT )
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR M
ASSIGN =
INTCON 78
SEMICN ;
INTTK int
IDENFR N
ASSIGN =
INTCON 34
SEMICN ;
INTTK int
IDENFR e
COMMA ,
IDENFR result
SEMICN ;
CHARTK char
IDENFR fuhao
SEMICN ;
CHARTK char
IDENFR _jia
ASSIGN =
CHARCON +
SEMICN ;
CHARTK char
IDENFR _jian
ASSIGN =
CHARCON -
SEMICN ;
CHARTK char
IDENFR _cheng
ASSIGN =
CHARCON *
SEMICN ;
CHARTK char
IDENFR _chu
ASSIGN =
CHARCON /
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR d
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR e
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR fuhao
RPARENT )
SEMICN ;
SEMICN ;
IDENFR f1
LPARENT (
RPARENT )
SEMICN ;
IDENFR f2
LPARENT (
IDENFR fuhao
RPARENT )
SEMICN ;
IDENFR ma
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR f2
LPARENT (
IDENFR fuhao
RPARENT )
SEMICN ;
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR f3
LPARENT (
IDENFR M
COMMA ,
IDENFR N
RPARENT )
SEMICN ;
IDENFR result
ASSIGN =
IDENFR f4
LPARENT (
IDENFR d
COMMA ,
IDENFR e
COMMA ,
IDENFR fuhao
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18231199
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR result
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON maxM,N
COMMA ,
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR ma
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR a
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON J
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON S
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON J
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON X
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Y
RPARENT )
SEMICN ;
RBRACE }
