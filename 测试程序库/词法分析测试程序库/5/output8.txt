CONSTTK const
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR function1
LPARENT (
CHARTK char
IDENFR ch
RPARENT )
LBRACE {
LBRACE {
RETURNTK return
LPARENT (
CHARCON t
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
INTTK int
IDENFR function2
LPARENT (
INTTK int
IDENFR para1
COMMA ,
INTTK int
IDENFR para2
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR para1
EQL ==
IDENFR para2
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR ch1
ASSIGN =
CHARCON a
SEMICN ;
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
PLUS +
INTCON 2
COMMA ,
IDENFR b
ASSIGN =
MINU -
INTCON 39
SEMICN ;
CHARTK char
IDENFR ch2
ASSIGN =
CHARCON 4
SEMICN ;
INTTK int
IDENFR s
COMMA ,
IDENFR t
SEMICN ;
CHARTK char
IDENFR str
LBRACK [
INTCON 3
RBRACK ]
SEMICN ;
CHARTK char
IDENFR map
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
LBRACE {
IDENFR s
ASSIGN =
INTCON 4
SEMICN ;
IDENFR t
ASSIGN =
IDENFR function2
LPARENT (
IDENFR s
COMMA ,
IDENFR s
RPARENT )
SEMICN ;
IDENFR ch2
ASSIGN =
IDENFR function1
LPARENT (
IDENFR ch1
RPARENT )
SEMICN ;
IDENFR str
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHARCON _
SEMICN ;
IDENFR str
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
CHARCON A
SEMICN ;
IDENFR str
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
CHARCON 5
SEMICN ;
IDENFR map
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHARCON +
SEMICN ;
IDENFR map
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
CHARCON -
SEMICN ;
IDENFR map
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
CHARCON *
SEMICN ;
IDENFR map
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
CHARCON /
SEMICN ;
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON 18231011
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR t
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR ch2
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR t
ASSIGN =
INTCON 0
SEMICN ;
IDENFR t
LSS <
IDENFR s
MINU -
INTCON 1
SEMICN ;
IDENFR t
ASSIGN =
IDENFR t
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR str
LBRACK [
IDENFR t
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR t
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR t
LSS <
INTCON 2
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR s
ASSIGN =
INTCON 1
SEMICN ;
IDENFR s
GEQ >=
INTCON 0
SEMICN ;
IDENFR s
ASSIGN =
IDENFR s
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR map
LBRACK [
IDENFR t
RBRACK ]
LBRACK [
IDENFR s
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
IDENFR t
ASSIGN =
IDENFR t
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON Akasaka
COMMA ,
MINU -
LPARENT (
PLUS +
IDENFR b
PLUS +
IDENFR a
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18231011
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18231011
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18231011
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18231011
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
