CONSTTK const
INTTK int
IDENFR int_a
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR int_b
ASSIGN =
MINU -
INTCON 1
COMMA ,
IDENFR int_c
ASSIGN =
INTCON 1
COMMA ,
IDENFR int_d
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR int_e
ASSIGN =
INTCON 123
COMMA ,
IDENFR int_f
ASSIGN =
MINU -
INTCON 123
SEMICN ;
CONSTTK const
CHARTK char
IDENFR char_a
ASSIGN =
CHARCON a
SEMICN ;
CONSTTK const
CHARTK char
IDENFR char_b
ASSIGN =
CHARCON b
COMMA ,
IDENFR char_c
ASSIGN =
CHARCON c
SEMICN ;
INTTK int
IDENFR int_m
SEMICN ;
INTTK int
IDENFR int_n
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR int_o
ASSIGN =
MINU -
INTCON 1
SEMICN ;
INTTK int
IDENFR s
SEMICN ;
INTTK int
IDENFR ID
ASSIGN =
INTCON 18182646
SEMICN ;
INTTK int
IDENFR int_G
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR int_H
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
COMMA ,
INTCON 9
COMMA ,
INTCON 10
RBRACE }
SEMICN ;
INTTK int
IDENFR int_I
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR int_J
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 2
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR int_K
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR int_L
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR char_D
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
CHARCON c
COMMA ,
CHARCON d
RBRACE }
COMMA ,
LBRACE {
CHARCON e
COMMA ,
CHARCON f
RBRACE }
RBRACE }
SEMICN ;
CHARTK char
IDENFR char_E
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR char_F
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR char_G
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
CHARCON a
COMMA ,
CHARCON b
COMMA ,
CHARCON +
COMMA ,
CHARCON *
COMMA ,
CHARCON 5
COMMA ,
CHARCON F
COMMA ,
CHARCON g
COMMA ,
CHARCON h
COMMA ,
CHARCON i
COMMA ,
CHARCON j
RBRACE }
SEMICN ;
INTTK int
IDENFR Parameter_1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR y
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR z
ASSIGN =
INTCON 2
SEMICN ;
RETURNTK return
LPARENT (
IDENFR x
PLUS +
IDENFR y
PLUS +
IDENFR z
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR Parameter_2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR Pig_Ma
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR ID
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR flag
SEMICN ;
INTTK int
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR temp
MULT *
INTCON 1
SEMICN ;
IDENFR temp
ASSIGN =
IDENFR temp
DIV /
INTCON 1
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR flag
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR flag
LSS <
IDENFR int_a
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR flag
LEQ <=
IDENFR int_a
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 2
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR flag
NEQ !=
IDENFR int_a
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 3
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR flag
EQL ==
IDENFR int_a
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 4
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR flag
GRE >
IDENFR int_a
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 5
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR flag
GEQ >=
IDENFR int_a
RPARENT )
LBRACE {
IDENFR flag
ASSIGN =
INTCON 6
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR flag
ASSIGN =
INTCON 0
SEMICN ;
IDENFR flag
LSS <
INTCON 4
SEMICN ;
IDENFR flag
ASSIGN =
IDENFR flag
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR int_G
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR flag
ASSIGN =
INTCON 4
SEMICN ;
IDENFR flag
GRE >
INTCON 0
SEMICN ;
IDENFR flag
ASSIGN =
IDENFR flag
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR int_G
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR ID
RPARENT )
LBRACE {
CASETK case
INTCON 18182646
COLON :
IDENFR temp
ASSIGN =
IDENFR temp
PLUS +
INTCON 1
SEMICN ;
CASETK case
INTCON 0
COLON :
IDENFR temp
ASSIGN =
IDENFR temp
MINU -
INTCON 1
SEMICN ;
DEFAULTTK default
COLON :
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR temp
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
IDENFR temp
ASSIGN =
IDENFR temp
MINU -
INTCON 1
SEMICN ;
DEFAULTTK default
COLON :
IDENFR temp
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR int_o
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR int_o
ASSIGN =
IDENFR int_o
MINU -
IDENFR int_o
SEMICN ;
RBRACE }
IDENFR Pig_Ma
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR Parameter_1
LPARENT (
INTCON 1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR Parameter_1
LPARENT (
INTCON 1
RPARENT )
PLUS +
INTCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR ID
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_f
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR int_f
RPARENT )
SEMICN ;
RBRACE }
