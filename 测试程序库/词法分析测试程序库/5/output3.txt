CONSTTK const
INTTK int
IDENFR MAXN
ASSIGN =
PLUS +
INTCON 10007
SEMICN ;
CHARTK char
IDENFR _
ASSIGN =
CHARCON *
SEMICN ;
INTTK int
IDENFR par
LBRACK [
INTCON 10007
RBRACK ]
SEMICN ;
INTTK int
IDENFR findpar
LPARENT (
INTTK int
IDENFR p
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR par
LBRACK [
IDENFR p
RBRACK ]
NEQ !=
IDENFR p
RPARENT )
LBRACE {
IDENFR par
LBRACK [
IDENFR p
RBRACK ]
ASSIGN =
IDENFR findpar
LPARENT (
IDENFR par
LBRACK [
IDENFR p
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR par
LBRACK [
IDENFR p
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR getcc
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR hello
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR aaa
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON HelloWorld
COMMA ,
PLUS +
INTCON 114514
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR hellobye
LPARENT (
INTTK int
IDENFR a1
COMMA ,
INTTK int
IDENFR a2
COMMA ,
INTTK int
IDENFR a3
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR test
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR mod
ASSIGN =
INTCON 107
SEMICN ;
CHARTK char
IDENFR aaaa
ASSIGN =
CHARCON +
SEMICN ;
CHARTK char
IDENFR bbb
ASSIGN =
CHARCON a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON a function with no return;
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n
COMMA ,
IDENFR m
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR z
COMMA ,
IDENFR x
COMMA ,
IDENFR y
SEMICN ;
CHARTK char
IDENFR c
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373142
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR m
RPARENT )
SEMICN ;
IDENFR hellobye
LPARENT (
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RPARENT )
SEMICN ;
IDENFR hello
LPARENT (
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
LSS <
INTCON 0
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
GEQ >=
INTCON 1
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
INTCON 0
NEQ !=
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 0
EQL ==
INTCON 1
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
DIV /
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
IDENFR n
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR par
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR m
MULT *
INTCON 1
SEMICN ;
IDENFR i
GRE >
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR z
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR y
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR z
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR par
LBRACK [
IDENFR findpar
LPARENT (
IDENFR y
RPARENT )
RBRACK ]
ASSIGN =
IDENFR findpar
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IFTK if
LPARENT (
IDENFR findpar
LPARENT (
IDENFR x
RPARENT )
EQL ==
IDENFR findpar
LPARENT (
IDENFR y
RPARENT )
RPARENT )
IDENFR c
ASSIGN =
CHARCON Y
SEMICN ;
ELSETK else
IDENFR c
ASSIGN =
CHARCON N
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
