CONSTTK const
CHARTK char
IDENFR a_A
ASSIGN =
CHARCON *
COMMA ,
IDENFR x
ASSIGN =
CHARCON +
COMMA ,
IDENFR y
ASSIGN =
CHARCON 1
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR f
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 0
PLUS +
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR c
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
RETURNTK return
LPARENT (
MINU -
IDENFR d
MULT *
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
MULT *
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
MULT *
LPARENT (
INTCON 0
RPARENT )
MULT *
INTCON 10
MULT *
CHARCON a
MULT *
IDENFR f
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373157
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON +-*/aA_0
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
PLUS +
PLUS +
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
GEQ >=
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LEQ <=
MINU -
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR i
RPARENT )
LBRACE {
CASETK case
INTCON 0
COLON :
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR i
RPARENT )
LBRACE {
CASETK case
INTCON 0
COLON :
SEMICN ;
CASETK case
INTCON 1
COLON :
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
SCANFTK scanf
LPARENT (
IDENFR i
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MULT *
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
DIV /
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
PLUS +
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON test
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
RBRACE }
