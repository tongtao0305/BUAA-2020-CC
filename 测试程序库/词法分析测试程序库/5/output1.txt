CONSTTK const
INTTK int
IDENFR lqw
ASSIGN =
PLUS +
INTCON 917
COMMA ,
IDENFR hjf
ASSIGN =
MINU -
INTCON 924
SEMICN ;
CONSTTK const
CHARTK char
IDENFR A
ASSIGN =
CHARCON a
SEMICN ;
INTTK int
IDENFR bArray
LBRACK [
INTCON 6
RBRACK ]
SEMICN ;
INTTK int
IDENFR cArrays
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 100
RBRACK ]
SEMICN ;
INTTK int
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR eArray
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 6
COMMA ,
INTCON 7
COMMA ,
INTCON 8
RBRACE }
SEMICN ;
INTTK int
IDENFR fArray
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 9
COMMA ,
INTCON 8
COMMA ,
INTCON 7
COMMA ,
INTCON 6
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR f_a
ASSIGN =
INTCON 999
SEMICN ;
INTTK int
IDENFR f_b
ASSIGN =
INTCON 666
SEMICN ;
WHILETK while
LPARENT (
IDENFR f_b
LSS <
IDENFR f_a
RPARENT )
LBRACE {
IDENFR f_b
ASSIGN =
IDENFR f_b
PLUS +
INTCON 2
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR f_b
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR func2
LPARENT (
INTTK int
IDENFR p
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
MINU -
IDENFR p
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
CHARTK char
IDENFR p1
COMMA ,
INTTK int
IDENFR p2
COMMA ,
CHARTK char
IDENFR p3
RPARENT )
LBRACE {
IFTK if
LPARENT (
PLUS +
IDENFR p1
PLUS +
IDENFR p2
PLUS +
IDENFR p3
LEQ <=
INTCON 100
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON p1 + p2 + p3 = 
COMMA ,
IDENFR p1
PLUS +
IDENFR p2
PLUS +
IDENFR p3
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR p1
PLUS +
IDENFR p2
PLUS +
IDENFR p3
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 17005014
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR d
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR A
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 6
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR bArray
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR bArray
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
IDENFR d
LSS <
INTCON 3
SEMICN ;
IDENFR d
ASSIGN =
IDENFR d
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR eArray
LBRACK [
IDENFR d
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
IDENFR d
GRE >
MINU -
INTCON 3
SEMICN ;
IDENFR d
ASSIGN =
IDENFR d
MINU -
INTCON 1
RPARENT )
LBRACE {
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR d
PLUS +
IDENFR hjf
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR d
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
ELSETK else
IDENFR fArray
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
INTCON 10
SEMICN ;
FORTK for
LPARENT (
IDENFR d
ASSIGN =
INTCON 0
SEMICN ;
IDENFR d
LSS <
INTCON 2
SEMICN ;
IDENFR d
ASSIGN =
IDENFR d
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
PRINTFTK printf
LPARENT (
IDENFR fArray
LBRACK [
IDENFR d
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
IDENFR func1
LPARENT (
RPARENT )
PLUS +
IDENFR func2
LPARENT (
INTCON 668
RPARENT )
PLUS +
IDENFR func3
LPARENT (
CHARCON 2
COMMA ,
MINU -
INTCON 80
COMMA ,
CHARCON 1
RPARENT )
MULT *
IDENFR lqw
RPARENT )
SEMICN ;
RBRACE }
