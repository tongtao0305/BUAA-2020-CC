INTTK int
IDENFR c
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHARCON 5
SEMICN ;
INTTK int
IDENFR ee
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR eee
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 3
COMMA ,
PLUS +
INTCON 4
RBRACE }
SEMICN ;
INTTK int
IDENFR f
ASSIGN =
INTCON 4
SEMICN ;
INTTK int
IDENFR g
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR gg
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 7
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR H
LPARENT (
CHARTK char
IDENFR hi
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR h_h
LPARENT (
INTTK int
IDENFR hj
COMMA ,
CHARTK char
IDENFR ko
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR b
ASSIGN =
CHARCON 1
COMMA ,
IDENFR bb
ASSIGN =
CHARCON 2
SEMICN ;
RETURNTK return
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR hhh
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR c
COMMA ,
IDENFR d
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR dd
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373528
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR k
ASSIGN =
MINU -
INTCON 432
SEMICN ;
CHARTK char
IDENFR zzz
SEMICN ;
INTTK int
IDENFR a1
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR a2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR a1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR hhh
LPARENT (
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR zzz
RPARENT )
SEMICN ;
IDENFR zzz
ASSIGN =
CHARCON +
SEMICN ;
IDENFR zzz
ASSIGN =
CHARCON *
SEMICN ;
IDENFR k
ASSIGN =
INTCON 4
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
GRE >
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON asd%c*+22
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR k
ASSIGN =
INTCON 0
SEMICN ;
IDENFR k
LEQ <=
INTCON 3
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR k
MULT *
INTCON 2
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR k
ASSIGN =
INTCON 2
SEMICN ;
IDENFR k
GEQ >=
INTCON 0
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON %d
COMMA ,
IDENFR k
MULT *
INTCON 3
MINU -
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR k
NEQ !=
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR k
EQL ==
INTCON 2
RPARENT )
LBRACE {
IDENFR k
ASSIGN =
IDENFR H
LPARENT (
CHARCON h
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
MINU -
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
RBRACE }
SWITCHTK switch
LPARENT (
PLUS +
IDENFR k
DIV /
INTCON 1
MULT *
IDENFR ee
LBRACK [
INTCON 0
RBRACK ]
MINU -
IDENFR k
PLUS +
INTCON 2
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
IDENFR k
ASSIGN =
IDENFR k
MULT *
INTCON 5
SEMICN ;
CASETK case
INTCON 2
COLON :
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 0
SEMICN ;
DEFAULTTK default
COLON :
IDENFR k
ASSIGN =
IDENFR k
MINU -
INTCON 9
SEMICN ;
RBRACE }
RBRACE }
