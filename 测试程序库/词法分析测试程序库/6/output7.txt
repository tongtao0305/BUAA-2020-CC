CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 12
SEMICN ;
CONSTTK const
CHARTK char
IDENFR x
ASSIGN =
CHARCON a
SEMICN ;
CONSTTK const
INTTK int
IDENFR bbb
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
PLUS +
INTCON 2333
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c
ASSIGN =
CHARCON 1
SEMICN ;
CONSTTK const
CHARTK char
IDENFR eeee
ASSIGN =
CHARCON a
SEMICN ;
CONSTTK const
CHARTK char
IDENFR asd1
ASSIGN =
CHARCON *
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ssss
ASSIGN =
CHARCON +
SEMICN ;
INTTK int
IDENFR Q
COMMA ,
IDENFR SSS
SEMICN ;
INTTK int
IDENFR w
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CHARTK char
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 22
RBRACK ]
SEMICN ;
INTTK int
IDENFR r_1
ASSIGN =
INTCON 1
SEMICN ;
VOIDTK void
IDENFR test3
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR test1
LPARENT (
INTTK int
IDENFR p
COMMA ,
INTTK int
IDENFR o
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR p
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR test2
LPARENT (
CHARTK char
IDENFR m
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR l
ASSIGN =
MINU -
INTCON 1
SEMICN ;
CHARTK char
IDENFR k
ASSIGN =
CHARCON +
SEMICN ;
RETURNTK return
LPARENT (
IDENFR k
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR u
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR s
ASSIGN =
INTCON 0
SEMICN ;
CHARTK char
IDENFR t
ASSIGN =
CHARCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR s
ASSIGN =
IDENFR s
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR s
ASSIGN =
IDENFR s
MINU -
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 3
SEMICN ;
IDENFR i
GRE >
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR s
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR s
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR s
ASSIGN =
IDENFR s
PLUS +
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
IDENFR s
MINU -
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
IDENFR s
MULT *
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
IDENFR s
DIV /
INTCON 1
SEMICN ;
IDENFR test1
LPARENT (
IDENFR i
COMMA ,
IDENFR s
RPARENT )
SEMICN ;
IDENFR test3
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR s
ASSIGN =
IDENFR s
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR s
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR s
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
IDENFR s
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR s
ASSIGN =
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR s
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
SEMICN ;
IDENFR u
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR s
ASSIGN =
IDENFR u
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR t
ASSIGN =
IDENFR e
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR e
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
CHARCON a
SEMICN ;
IDENFR s
ASSIGN =
IDENFR test1
LPARENT (
IDENFR i
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
IDENFR t
ASSIGN =
CHARCON a
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR s
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373126
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR s
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 123
COMMA ,
IDENFR i
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 7
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 8
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 9
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 10
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
LEQ <=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
IDENFR i
NEQ !=
INTCON 0
RPARENT )
LBRACE {
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR i
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
LBRACE {
SEMICN ;
RBRACE }
CASETK case
INTCON 2
COLON :
LBRACE {
SEMICN ;
RBRACE }
DEFAULTTK default
COLON :
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR t
RPARENT )
LBRACE {
CASETK case
CHARCON 1
COLON :
LBRACE {
SEMICN ;
RBRACE }
DEFAULTTK default
COLON :
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
