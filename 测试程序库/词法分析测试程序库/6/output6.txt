CONSTTK const
INTTK int
IDENFR a
ASSIGN =
PLUS +
INTCON 1
COMMA ,
IDENFR b
ASSIGN =
MINU -
INTCON 2
COMMA ,
IDENFR c
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
INTTK int
IDENFR d
ASSIGN =
INTCON 108
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c1
ASSIGN =
CHARCON _
SEMICN ;
CONSTTK const
CHARTK char
IDENFR c2
ASSIGN =
CHARCON 1
SEMICN ;
CONSTTK const
CHARTK char
IDENFR Cc1
ASSIGN =
CHARCON A
SEMICN ;
CONSTTK const
CHARTK char
IDENFR Cc2
ASSIGN =
CHARCON +
SEMICN ;
CONSTTK const
CHARTK char
IDENFR Cc3
ASSIGN =
CHARCON /
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
INTTK int
IDENFR y
LBRACK [
INTCON 15
RBRACK ]
SEMICN ;
INTTK int
IDENFR z
LBRACK [
INTCON 13
RBRACK ]
LBRACK [
INTCON 16
RBRACK ]
SEMICN ;
INTTK int
IDENFR xx
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR yy
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
INTTK int
IDENFR zz
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR cmp
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
LSS <
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
MINU -
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
MINU -
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR x
NEQ !=
IDENFR y
RPARENT )
RETURNTK return
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
ELSETK else
LBRACE {
RETURNTK return
LPARENT (
MINU -
INTCON 100
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
MINU -
INTCON 100
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR z
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR y
ASSIGN =
INTCON 2
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
PLUS +
IDENFR y
SEMICN ;
IDENFR x
ASSIGN =
MINU -
INTCON 1
PLUS +
IDENFR x
MULT *
IDENFR y
MULT *
INTCON 3
MULT *
INTCON 4
SEMICN ;
IDENFR x
ASSIGN =
PLUS +
INTCON 1
PLUS +
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
MINU -
IDENFR y
SEMICN ;
IDENFR x
ASSIGN =
IDENFR y
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print2
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON hello world
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR print3
LPARENT (
CHARTK char
IDENFR x
RPARENT )
LBRACE {
RBRACE }
CHARTK char
IDENFR get
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
INTTK int
IDENFR s
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR n
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373114
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR cmp
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR y
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR i
GEQ >=
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
IDENFR j
LEQ <=
INTCON 10
RPARENT )
LBRACE {
IDENFR z
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
IDENFR j
LEQ <=
INTCON 10
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
IDENFR s
ASSIGN =
IDENFR s
PLUS +
IDENFR z
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON answer is 
COMMA ,
IDENFR s
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
SWITCHTK switch
LPARENT (
IDENFR n
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
PRINTFTK printf
LPARENT (
STRCON 1
RPARENT )
SEMICN ;
CASETK case
INTCON 2
COLON :
PRINTFTK printf
LPARENT (
STRCON 2
RPARENT )
SEMICN ;
CASETK case
INTCON 3
COLON :
PRINTFTK printf
LPARENT (
STRCON 3
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
PRINTFTK printf
LPARENT (
STRCON default
RPARENT )
SEMICN ;
RBRACE }
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
SWITCHTK switch
LPARENT (
IDENFR n
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
PRINTFTK printf
LPARENT (
STRCON 1
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
PRINTFTK printf
LPARENT (
STRCON default
RPARENT )
SEMICN ;
RBRACE }
IDENFR print1
LPARENT (
INTCON 10
RPARENT )
SEMICN ;
IDENFR print2
LPARENT (
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON the
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON end
RPARENT )
SEMICN ;
RBRACE }
