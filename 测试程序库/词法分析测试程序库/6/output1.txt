CONSTTK const
INTTK int
IDENFR pi
ASSIGN =
INTCON 3
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 20
SEMICN ;
INTTK int
IDENFR signed_B
ASSIGN =
PLUS +
INTCON 20
SEMICN ;
INTTK int
IDENFR minus_B
ASSIGN =
MINU -
INTCON 20
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHARCON c
SEMICN ;
CHARTK char
IDENFR var1
COMMA ,
IDENFR char1
SEMICN ;
INTTK int
IDENFR var2
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR var3
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR var4
COMMA ,
IDENFR var5
SEMICN ;
INTTK int
IDENFR var6
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR var7
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR var8
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR addMult
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
COMMA ,
INTTK int
IDENFR s
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR one
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR c
SEMICN ;
IDENFR c
ASSIGN =
INTCON 2
SEMICN ;
IDENFR c
ASSIGN =
MINU -
IDENFR a
PLUS +
IDENFR b
DIV /
IDENFR one
SEMICN ;
RETURNTK return
LPARENT (
IDENFR c
MULT *
IDENFR s
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR printChar
LPARENT (
CHARTK char
IDENFR a
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR hello
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON hello world!
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR isPositive
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR num
GRE >
INTCON 0
RPARENT )
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
ELSETK else
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR readNwrite
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR input
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR input
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON input:
COMMA ,
IDENFR input
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR signal
SEMICN ;
INTTK int
IDENFR array
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
INTTK int
IDENFR ar
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18231091
RPARENT )
SEMICN ;
IDENFR addMult
LPARENT (
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR signed_B
RPARENT )
SEMICN ;
IDENFR printChar
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR hello
LPARENT (
RPARENT )
SEMICN ;
IDENFR readNwrite
LPARENT (
RPARENT )
SEMICN ;
IDENFR signal
ASSIGN =
INTCON 1
SEMICN ;
IDENFR signal
ASSIGN =
MINU -
MINU -
INTCON 1
SEMICN ;
IDENFR signal
ASSIGN =
PLUS +
PLUS +
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR signal
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR signal
EQL ==
INTCON 0
RPARENT )
IDENFR signal
ASSIGN =
IDENFR signal
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR signal
LSS <
INTCON 0
RPARENT )
LBRACE {
IDENFR signal
ASSIGN =
IDENFR signal
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR signal
LEQ <=
INTCON 0
RPARENT )
IDENFR signal
ASSIGN =
INTCON 0
SEMICN ;
ELSETK else
LBRACE {
RBRACE }
IDENFR array
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
INTCON 10
SEMICN ;
IDENFR ar
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
SWITCHTK switch
LPARENT (
IDENFR signal
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
PRINTFTK printf
LPARENT (
IDENFR signal
RPARENT )
SEMICN ;
CASETK case
INTCON 2
COLON :
PRINTFTK printf
LPARENT (
STRCON 2
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
PRINTFTK printf
LPARENT (
STRCON KO
RPARENT )
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR signal
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
PRINTFTK printf
LPARENT (
STRCON 1
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
PRINTFTK printf
LPARENT (
STRCON KO
RPARENT )
SEMICN ;
RBRACE }
WHILETK while
LPARENT (
IDENFR signal
GEQ >=
INTCON 0
RPARENT )
LBRACE {
IDENFR signal
ASSIGN =
IDENFR signal
MINU -
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR signal
ASSIGN =
INTCON 0
SEMICN ;
IDENFR signal
NEQ !=
INTCON 10
SEMICN ;
IDENFR signal
ASSIGN =
IDENFR signal
PLUS +
INTCON 1
RPARENT )
IDENFR signal
ASSIGN =
IDENFR signal
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR signal
ASSIGN =
INTCON 10
SEMICN ;
IDENFR signal
GRE >
INTCON 0
SEMICN ;
IDENFR signal
ASSIGN =
IDENFR signal
MINU -
INTCON 1
RPARENT )
SEMICN ;
IDENFR signal
ASSIGN =
IDENFR signal
PLUS +
IDENFR array
LBRACK [
INTCON 5
RBRACK ]
PLUS +
IDENFR ar
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
PLUS +
LPARENT (
INTCON 5
PLUS +
INTCON 4
RPARENT )
PLUS +
INTCON 5
PLUS +
CHARCON c
PLUS +
IDENFR isPositive
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
