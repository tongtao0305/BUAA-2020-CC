CONSTTK const
INTTK int
IDENFR _
ASSIGN =
PLUS +
INTCON 1
COMMA ,
IDENFR aA
ASSIGN =
INTCON 10
COMMA ,
IDENFR a1
ASSIGN =
MINU -
INTCON 10
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR b2
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
CHARTK char
IDENFR c
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
CHARCON a
COMMA ,
CHARCON /
COMMA ,
CHARCON -
RBRACE }
SEMICN ;
CHARTK char
IDENFR c2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
CHARCON +
COMMA ,
CHARCON *
RBRACE }
COMMA ,
LBRACE {
CHARCON a
COMMA ,
CHARCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR d
SEMICN ;
CHARTK char
IDENFR e
ASSIGN =
CHARCON _
SEMICN ;
INTTK int
IDENFR Has_ReturnAndOnePara_Func
LPARENT (
INTTK int
IDENFR a
RPARENT )
LBRACE {
INTTK int
IDENFR temp
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR temp2
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
IDENFR temp2
ASSIGN =
INTCON 0
SEMICN ;
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IDENFR b2
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR temp2
EQL ==
INTCON 0
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR temp2
GRE >
INTCON 0
RPARENT )
SEMICN ;
ELSETK else
SEMICN ;
WHILETK while
LPARENT (
IDENFR temp2
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR temp2
ASSIGN =
IDENFR temp
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON wdnmd
COMMA ,
IDENFR temp
PLUS +
IDENFR temp2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON wdnmd2
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
SWITCHTK switch
LPARENT (
IDENFR i
RPARENT )
LBRACE {
CASETK case
INTCON 0
COLON :
PRINTFTK printf
LPARENT (
STRCON case0
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 3
SEMICN ;
IDENFR i
GEQ >=
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
SWITCHTK switch
LPARENT (
IDENFR i
RPARENT )
LBRACE {
CASETK case
INTCON 0
COLON :
PRINTFTK printf
LPARENT (
STRCON againCase0
RPARENT )
SEMICN ;
CASETK case
INTCON 1
COLON :
PRINTFTK printf
LPARENT (
STRCON case1
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR No_Return_No_Para
LPARENT (
RPARENT )
LBRACE {
LBRACE {
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR Has_Void_Return
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON this is Has_Void_Return
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
CHARTK char
IDENFR Has_ReturnAndTwoPara_Func
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR sum
SEMICN ;
CHARTK char
IDENFR ans
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR sum
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373494
RPARENT )
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR Has_ReturnAndOnePara_Func
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR Has_ReturnAndTwoPara_Func
LPARENT (
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
IDENFR No_Return_No_Para
LPARENT (
RPARENT )
SEMICN ;
IDENFR Has_Void_Return
LPARENT (
RPARENT )
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR aA
SEMICN ;
IDENFR sum
ASSIGN =
PLUS +
IDENFR aA
SEMICN ;
IDENFR sum
ASSIGN =
MINU -
IDENFR b
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR b2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR sum
ASSIGN =
LPARENT (
IDENFR sum
RPARENT )
SEMICN ;
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
IDENFR ans
ASSIGN =
CHARCON c
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR aA
MULT *
IDENFR a1
SEMICN ;
IDENFR sum
ASSIGN =
IDENFR aA
PLUS +
IDENFR aA
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR sum
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON wdnmd3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON wdnmd4
RPARENT )
SEMICN ;
LBRACE {
RBRACE }
RBRACE }
