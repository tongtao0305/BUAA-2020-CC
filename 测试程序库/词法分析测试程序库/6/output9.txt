CONSTTK const
INTTK int
IDENFR const_int
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
CONSTTK const
CHARTK char
IDENFR const_char
ASSIGN =
CHARCON a
COMMA ,
IDENFR const_num
ASSIGN =
CHARCON 0
COMMA ,
IDENFR const_add
ASSIGN =
CHARCON +
COMMA ,
IDENFR const_div
ASSIGN =
CHARCON /
SEMICN ;
INTTK int
IDENFR var
COMMA ,
IDENFR array
LBRACK [
INTCON 100
RBRACK ]
COMMA ,
IDENFR matrix
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHARCON 0
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR val1
COMMA ,
INTTK int
IDENFR val2
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR const_val
ASSIGN =
MINU -
INTCON 10
SEMICN ;
INTTK int
IDENFR val
ASSIGN =
INTCON 10
SEMICN ;
IDENFR val
ASSIGN =
IDENFR val1
MULT *
IDENFR val
PLUS +
IDENFR val2
SEMICN ;
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR func2
LPARENT (
CHARTK char
IDENFR c
RPARENT )
LBRACE {
CHARTK char
IDENFR str
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
CHARCON 0
COMMA ,
CHARCON 1
RBRACE }
SEMICN ;
RETURNTK return
LPARENT (
IDENFR str
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
RPARENT )
LBRACE {
CHARTK char
IDENFR strs
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
CHARCON 0
COMMA ,
CHARCON 1
RBRACE }
COMMA ,
LBRACE {
CHARCON 2
COMMA ,
CHARCON 3
RBRACE }
RBRACE }
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func4
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR i
COMMA ,
IDENFR j
SEMICN ;
CHARTK char
IDENFR c1
COMMA ,
IDENFR c2
COMMA ,
IDENFR c3
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
MINU -
INTCON 10
SEMICN ;
WHILETK while
LPARENT (
IDENFR a
LSS <
INTCON 10
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR a
RBRACK ]
ASSIGN =
IDENFR a
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LEQ <=
INTCON 9
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 9
SEMICN ;
IDENFR j
GEQ >=
INTCON 1
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR i
MULT *
INTCON 9
PLUS +
IDENFR j
SEMICN ;
IDENFR matrix
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR i
PLUS +
IDENFR j
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR a
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
PLUS +
INTCON 10
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 11
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 10
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
INTCON 10
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
MINU -
INTCON 1
LSS <
INTCON 1
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
INTCON 100
PLUS +
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
INTCON 99
PLUS +
IDENFR b
SEMICN ;
RBRACE }
IDENFR c
ASSIGN =
IDENFR func1
LPARENT (
IDENFR a
COMMA ,
IDENFR b
RPARENT )
SEMICN ;
IDENFR c1
ASSIGN =
IDENFR func2
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR c2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373326
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON Hello World!
RPARENT )
SEMICN ;
SWITCHTK switch
LPARENT (
IDENFR a
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
IDENFR a
ASSIGN =
IDENFR a
MULT *
INTCON 1
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR b
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
IDENFR b
ASSIGN =
IDENFR b
DIV /
INTCON 1
SEMICN ;
CASETK case
INTCON 2
COLON :
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON 1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 4
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 5
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 6
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 7
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 8
RPARENT )
SEMICN ;
RBRACE }
