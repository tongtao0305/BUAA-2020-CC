CONSTTK const
INTTK int
IDENFR n
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ch
ASSIGN =
CHARCON +
SEMICN ;
INTTK int
IDENFR mat1
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR mat2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
INTTK int
IDENFR m
SEMICN ;
CHARTK char
IDENFR c
ASSIGN =
CHARCON *
SEMICN ;
CHARTK char
IDENFR cmat1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
CHARCON a
COMMA ,
CHARCON 1
RBRACE }
SEMICN ;
CHARTK char
IDENFR cmat2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
CHARCON b
COMMA ,
CHARCON 2
RBRACE }
COMMA ,
LBRACE {
CHARCON c
COMMA ,
CHARCON 3
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR n1
ASSIGN =
PLUS +
INTCON 2
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ch2
ASSIGN =
CHARCON a
SEMICN ;
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR n_1
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR n2
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func3
LPARENT (
RPARENT )
LBRACE {
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR n3
ASSIGN =
INTCON 1
SEMICN ;
CHARTK char
IDENFR ch3
ASSIGN =
CHARCON a
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
INTTK int
IDENFR x1
SEMICN ;
INTTK int
IDENFR exp1
COMMA ,
IDENFR exp2
COMMA ,
IDENFR exp3
COMMA ,
IDENFR exp4
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR exp5
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
IDENFR exp1
ASSIGN =
IDENFR n3
SEMICN ;
IDENFR exp2
ASSIGN =
PLUS +
INTCON 3
PLUS +
CHARCON a
MULT *
IDENFR func1
LPARENT (
IDENFR n3
RPARENT )
SEMICN ;
IDENFR exp3
ASSIGN =
MINU -
INTCON 1
PLUS +
LPARENT (
IDENFR n3
RPARENT )
PLUS +
IDENFR cmat1
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR cmat2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR exp4
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR exp5
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
WHILETK while
LPARENT (
INTCON 1
NEQ !=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 1
SEMICN ;
IDENFR i
LSS <
INTCON 5
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 5
SEMICN ;
IDENFR i
GRE >
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 2
LEQ <=
INTCON 1
RPARENT )
LBRACE {
RBRACE }
ELSETK else
LBRACE {
RBRACE }
IDENFR func2
LPARENT (
IDENFR n3
COMMA ,
IDENFR n3
RPARENT )
SEMICN ;
IDENFR func1
LPARENT (
IDENFR n3
RPARENT )
SEMICN ;
IDENFR func3
LPARENT (
RPARENT )
SEMICN ;
SWITCHTK switch
LPARENT (
IDENFR n3
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR n3
RPARENT )
LBRACE {
CASETK case
INTCON 1
COLON :
SEMICN ;
CASETK case
INTCON 2
COLON :
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
SCANFTK scanf
LPARENT (
IDENFR x1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373171
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR x1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR n3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR ch3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR exp1
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR exp2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR exp3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR exp4
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
COMMA ,
IDENFR exp5
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hhhh
RPARENT )
SEMICN ;
RBRACE }
