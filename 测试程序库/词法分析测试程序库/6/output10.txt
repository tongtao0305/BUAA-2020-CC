VOIDTK void
IDENFR basiccheck
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR q
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR x
COMMA ,
IDENFR X_
COMMA ,
IDENFR x1
SEMICN ;
CHARTK char
IDENFR s1
ASSIGN =
CHARCON +
SEMICN ;
CHARTK char
IDENFR s2
ASSIGN =
CHARCON *
SEMICN ;
CHARTK char
IDENFR s3
ASSIGN =
CHARCON a
SEMICN ;
CHARTK char
IDENFR s4
ASSIGN =
CHARCON 0
SEMICN ;
IDENFR x
ASSIGN =
INTCON 10
SEMICN ;
IDENFR X_
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
IDENFR x1
ASSIGN =
MINU -
INTCON 1
SEMICN ;
IDENFR x
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MINU -
INTCON 1
MULT *
INTCON 1
DIV /
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR onlySentences
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR onlyemptySentences
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
RBRACE }
INTTK int
IDENFR exp_assign_callcheck
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR x2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 0
COMMA ,
INTCON 0
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
IDENFR x
ASSIGN =
INTCON 0
SEMICN ;
IDENFR x1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
PLUS +
IDENFR x
MINU -
CHARCON a
MULT *
IDENFR onlySentences
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
IDENFR x2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
MINU -
IDENFR x1
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR x2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
DIV /
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR basiccheck
LPARENT (
RPARENT )
SEMICN ;
IDENFR onlyemptySentences
LPARENT (
INTCON 0
COMMA ,
INTCON 0
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
IDENFR x2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR if_emptycheck
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
IDENFR x
ASSIGN =
IDENFR x
PLUS +
INTCON 1
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR x
LSS <
IDENFR y
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
IDENFR x
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
LBRACE {
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR y
RPARENT )
IDENFR x
ASSIGN =
INTCON 2
SEMICN ;
ELSETK else
IFTK if
LPARENT (
IDENFR x
NEQ !=
IDENFR y
RPARENT )
IDENFR x
ASSIGN =
INTCON 4
SEMICN ;
RETURNTK return
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR loopcheck
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LEQ <=
INTCON 10
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 10
SEMICN ;
IDENFR i
GRE >
INTCON 0
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LEQ <=
INTCON 10
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
CHARTK char
IDENFR switchcheck
LPARENT (
CHARTK char
IDENFR z
RPARENT )
LBRACE {
SWITCHTK switch
LPARENT (
IDENFR z
RPARENT )
LBRACE {
CASETK case
CHARCON a
COLON :
SEMICN ;
CASETK case
CHARCON b
COLON :
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
IDENFR z
RPARENT )
LBRACE {
CASETK case
CHARCON a
COLON :
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
RETURNTK return
LPARENT (
CHARCON b
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18374472
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON onlySentences(x)=
COMMA ,
IDENFR onlySentences
LPARENT (
IDENFR x
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON exp_assign_callcheck()=
COMMA ,
IDENFR exp_assign_callcheck
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON if_emptycheck(x,0)=
COMMA ,
IDENFR if_emptycheck
LPARENT (
IDENFR x
COMMA ,
INTCON 0
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON loopcheck()=
COMMA ,
IDENFR loopcheck
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON switchcheck('b')=
COMMA ,
IDENFR switchcheck
LPARENT (
CHARCON b
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON x
COMMA ,
IDENFR x
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
