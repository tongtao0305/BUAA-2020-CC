CONSTTK const
INTTK int
IDENFR NE
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR LT
ASSIGN =
PLUS +
INTCON 1
COMMA ,
IDENFR GE
ASSIGN =
MINU -
INTCON 2
COMMA ,
IDENFR GT
ASSIGN =
MINU -
INTCON 20
COMMA ,
IDENFR LE
ASSIGN =
INTCON 888
COMMA ,
IDENFR EQ
ASSIGN =
PLUS +
INTCON 22
SEMICN ;
CONSTTK const
CHARTK char
IDENFR constA
ASSIGN =
CHARCON A
SEMICN ;
CONSTTK const
CHARTK char
IDENFR constB
ASSIGN =
CHARCON +
COMMA ,
IDENFR constC
ASSIGN =
CHARCON 2
COMMA ,
IDENFR constD
ASSIGN =
CHARCON *
SEMICN ;
INTTK int
IDENFR x
SEMICN ;
CHARTK char
IDENFR array
LBRACK [
INTCON 10
RBRACK ]
COMMA ,
IDENFR double_axis_array
LBRACK [
INTCON 10
RBRACK ]
LBRACK [
INTCON 9
RBRACK ]
SEMICN ;
CHARTK char
IDENFR t
ASSIGN =
CHARCON z
SEMICN ;
INTTK int
IDENFR globalFlag
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR Nums
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR flags
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR getNumSum
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
CHARTK char
IDENFR unUsed
ASSIGN =
CHARCON -
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 3
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR Nums
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR whileGetNumSum
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR sum
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR sum
ASSIGN =
IDENFR sum
PLUS +
IDENFR Nums
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
IDENFR sum
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR getX
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR getNum
LPARENT (
INTTK int
IDENFR i
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR Nums
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR add_and_increase
LPARENT (
INTTK int
IDENFR fff
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR fff
PLUS +
IDENFR y
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR none
LPARENT (
RPARENT )
LBRACE {
RBRACE }
VOIDTK void
IDENFR setNum
LPARENT (
INTTK int
IDENFR i
COMMA ,
INTTK int
IDENFR x
RPARENT )
LBRACE {
IDENFR Nums
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR x
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
CHARTK char
IDENFR getAAA
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON A
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373317
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 0
EQL ==
INTCON 1
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
INTCON 100
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR x
ASSIGN =
INTCON 6
SEMICN ;
IDENFR x
GEQ >=
INTCON 0
SEMICN ;
IDENFR x
ASSIGN =
IDENFR x
MINU -
INTCON 1
RPARENT )
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LEQ <=
INTCON 6
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
IDENFR double_axis_array
LBRACK [
IDENFR x
RBRACK ]
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
CHARCON a
SEMICN ;
RBRACE }
SWITCHTK switch
LPARENT (
MINU -
PLUS +
INTCON 2
MULT *
INTCON 3
MINU -
IDENFR x
RPARENT )
LBRACE {
CASETK case
MINU -
INTCON 5
COLON :
IDENFR x
ASSIGN =
IDENFR getNumSum
LPARENT (
RPARENT )
SEMICN ;
DEFAULTTK default
COLON :
SEMICN ;
RBRACE }
IDENFR none
LPARENT (
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR k
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR add_and_increase
LPARENT (
INTCON 1
COMMA ,
IDENFR k
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR whileGetNumSum
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON abcdefghijklmnopqrstuvwxyz_
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR add_and_increase
LPARENT (
IDENFR getNum
LPARENT (
INTCON 2
RPARENT )
MULT *
IDENFR getX
LPARENT (
RPARENT )
PLUS +
IDENFR EQ
COMMA ,
IDENFR globalFlag
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
CHARCON g
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
LPARENT (
CHARCON c
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR double_axis_array
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR flags
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
IDENFR x
MULT *
INTCON 0
PLUS +
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON a
COMMA ,
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
