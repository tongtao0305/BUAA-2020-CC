VOIDTK void
IDENFR function_bubble
LPARENT (
INTTK int
IDENFR n
RPARENT )
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 8
RBRACK ]
ASSIGN =
LBRACE {
INTCON 78
COMMA ,
INTCON 23
COMMA ,
INTCON 10
COMMA ,
INTCON 233
COMMA ,
INTCON 4897
COMMA ,
INTCON 1
COMMA ,
INTCON 24
COMMA ,
INTCON 98
RBRACE }
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR hold
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
IDENFR n
MINU -
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
IDENFR n
MINU -
INTCON 1
MINU -
IDENFR i
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
GRE >
IDENFR a
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR hold
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR a
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR a
LBRACK [
IDENFR j
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR hold
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON positive sequence:
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
WHILETK while
LPARENT (
IDENFR i
LSS <
IDENFR n
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR a
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR bubble_n
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR bubble_n
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18182649
RPARENT )
SEMICN ;
IDENFR function_bubble
LPARENT (
IDENFR bubble_n
RPARENT )
SEMICN ;
RBRACE }
