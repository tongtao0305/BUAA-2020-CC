VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR aggregate
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR number1
COMMA ,
IDENFR number2
COMMA ,
IDENFR storage
COMMA ,
IDENFR n
COMMA ,
IDENFR m
COMMA ,
IDENFR i
COMMA ,
IDENFR mark
SEMICN ;
INTTK int
IDENFR storage2
LBRACK [
INTCON 10
RBRACK ]
ASSIGN =
LBRACE {
INTCON 14
COMMA ,
INTCON 23
COMMA ,
INTCON 45
COMMA ,
INTCON 67
COMMA ,
INTCON 89
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 0
COMMA ,
INTCON 0
RBRACE }
SEMICN ;
CHARTK char
IDENFR Character_good
SEMICN ;
IDENFR number1
ASSIGN =
INTCON 4
SEMICN ;
IDENFR number2
ASSIGN =
INTCON 5
SEMICN ;
FORTK for
LPARENT (
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
IDENFR n
LSS <
IDENFR number1
MINU -
INTCON 1
SEMICN ;
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR aggregate
LBRACK [
IDENFR n
RBRACK ]
LSS <
IDENFR aggregate
LBRACK [
IDENFR n
PLUS +
INTCON 1
RBRACK ]
RPARENT )
LBRACE {
IDENFR storage
ASSIGN =
IDENFR aggregate
LBRACK [
IDENFR n
RBRACK ]
SEMICN ;
IDENFR aggregate
LBRACK [
IDENFR n
RBRACK ]
ASSIGN =
IDENFR aggregate
LBRACK [
IDENFR n
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
IDENFR aggregate
LBRACK [
IDENFR n
PLUS +
INTCON 1
RBRACK ]
ASSIGN =
IDENFR storage
SEMICN ;
IDENFR n
ASSIGN =
MINU -
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
SEMICN ;
FORTK for
LPARENT (
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
IDENFR n
LSS <
IDENFR number2
SEMICN ;
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR m
ASSIGN =
INTCON 0
SEMICN ;
IDENFR m
LSS <
IDENFR number1
SEMICN ;
IDENFR m
ASSIGN =
IDENFR m
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR storage2
LBRACK [
IDENFR n
RBRACK ]
GRE >
IDENFR aggregate
LBRACK [
IDENFR m
RBRACK ]
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR number1
SEMICN ;
IDENFR i
GRE >
IDENFR m
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
MINU -
INTCON 1
RPARENT )
LBRACE {
IDENFR aggregate
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR aggregate
LBRACK [
IDENFR i
MINU -
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
IDENFR aggregate
LBRACK [
IDENFR m
RBRACK ]
ASSIGN =
IDENFR storage2
LBRACK [
IDENFR n
RBRACK ]
SEMICN ;
IDENFR number1
ASSIGN =
IDENFR number1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR storage2
LBRACK [
IDENFR n
RBRACK ]
EQL ==
IDENFR aggregate
LBRACK [
IDENFR m
RBRACK ]
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
IDENFR m
SEMICN ;
IDENFR i
LSS <
IDENFR number1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR aggregate
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR aggregate
LBRACK [
IDENFR i
PLUS +
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
IDENFR number1
ASSIGN =
IDENFR number1
MINU -
INTCON 1
SEMICN ;
IDENFR mark
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IFTK if
LPARENT (
IDENFR m
EQL ==
IDENFR number1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR mark
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR aggregate
LBRACK [
IDENFR m
RBRACK ]
ASSIGN =
IDENFR storage2
LBRACK [
IDENFR n
RBRACK ]
SEMICN ;
IDENFR number1
ASSIGN =
IDENFR number1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR mark
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON 18231208
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR n
ASSIGN =
INTCON 0
SEMICN ;
IDENFR n
LSS <
IDENFR number1
MINU -
INTCON 1
SEMICN ;
IDENFR n
ASSIGN =
IDENFR n
PLUS +
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR aggregate
LBRACK [
IDENFR n
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR aggregate
LBRACK [
IDENFR n
RBRACK ]
PLUS +
INTCON 2
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR aggregate
LBRACK [
IDENFR n
RBRACK ]
MULT *
IDENFR n
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
