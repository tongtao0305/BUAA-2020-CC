CONSTTK const
INTTK int
IDENFR fixed_num1
ASSIGN =
INTCON 1
SEMICN ;
CONSTTK const
INTTK int
IDENFR fixed_num2
ASSIGN =
INTCON 2
COMMA ,
IDENFR fixed_num3
ASSIGN =
INTCON 3
SEMICN ;
CONSTTK const
CHARTK char
IDENFR fixed_char1
ASSIGN =
CHARCON +
COMMA ,
IDENFR fixed_char2
ASSIGN =
CHARCON -
COMMA ,
IDENFR fixed_char3
ASSIGN =
CHARCON A
SEMICN ;
INTTK int
IDENFR fixed_NumArray
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 0
COMMA ,
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 3
COMMA ,
INTCON 5
COMMA ,
INTCON 7
RBRACE }
COMMA ,
LBRACE {
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 6
COMMA ,
INTCON 8
RBRACE }
COMMA ,
LBRACE {
INTCON 100
COMMA ,
INTCON 200
COMMA ,
INTCON 300
COMMA ,
INTCON 400
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR CompareFunc
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GEQ >=
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR Compare2Func
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
NEQ !=
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR Compare3Func
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
LEQ <=
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR Compare4Func
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR y
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
EQL ==
IDENFR y
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
INTCON 0
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR fixed_num4
ASSIGN =
INTCON 10
SEMICN ;
CONSTTK const
INTTK int
IDENFR fixed_num5
ASSIGN =
INTCON 100
COMMA ,
IDENFR fixed_num6
ASSIGN =
INTCON 1000
SEMICN ;
CONSTTK const
CHARTK char
IDENFR fixed_char4
ASSIGN =
CHARCON a
COMMA ,
IDENFR fixed_char5
ASSIGN =
CHARCON b
COMMA ,
IDENFR fixed_char6
ASSIGN =
CHARCON c
SEMICN ;
INTTK int
IDENFR variable_num1
SEMICN ;
INTTK int
IDENFR variable_NumArray1
LBRACK [
INTCON 4
RBRACK ]
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
COMMA ,
IDENFR j
COMMA ,
IDENFR k
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON 18373039
RPARENT )
SEMICN ;
IDENFR variable_num1
ASSIGN =
IDENFR CompareFunc
LPARENT (
IDENFR fixed_num5
COMMA ,
MINU -
LPARENT (
IDENFR fixed_num6
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR variable_num1
RPARENT )
SEMICN ;
IDENFR variable_NumArray1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
PLUS +
LPARENT (
IDENFR CompareFunc
LPARENT (
IDENFR fixed_num4
COMMA ,
PLUS +
IDENFR fixed_num5
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR variable_NumArray1
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR variable_num1
MULT *
IDENFR variable_NumArray1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
IDENFR variable_num1
MULT *
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
MINU -
IDENFR variable_num1
PLUS +
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
LPARENT (
MINU -
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 4
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
SCANFTK scanf
LPARENT (
IDENFR variable_num1
RPARENT )
SEMICN ;
IDENFR variable_NumArray1
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
IDENFR variable_num1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 4
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 4
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR variable_NumArray2
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR variable_NumArray1
LBRACK [
IDENFR j
RBRACK ]
PLUS +
IDENFR i
SEMICN ;
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON variable_NumArray2[0][0]:
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON variable_NumArray2[0][1]:
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON variable_NumArray2[0][2]:
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON variable_NumArray2[0][3]:
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
RBRACE }
