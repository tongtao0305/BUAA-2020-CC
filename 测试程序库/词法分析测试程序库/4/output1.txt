CONSTTK const
INTTK int
IDENFR fixed_num1
ASSIGN =
INTCON 1
COMMA ,
IDENFR fixed_num2
ASSIGN =
INTCON 2
COMMA ,
IDENFR fixed_num3
ASSIGN =
INTCON 5
COMMA ,
IDENFR fixed_num4
ASSIGN =
INTCON 6
SEMICN ;
VOIDTK void
IDENFR printFunc1
LPARENT (
INTTK int
IDENFR a
COMMA ,
INTTK int
IDENFR b
RPARENT )
LBRACE {
INTTK int
IDENFR x
SEMICN ;
INTTK int
IDENFR y
SEMICN ;
IDENFR x
ASSIGN =
IDENFR a
PLUS +
IDENFR b
SEMICN ;
IDENFR y
ASSIGN =
IDENFR a
MINU -
IDENFR b
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 0
RPARENT )
LBRACE {
IDENFR x
ASSIGN =
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR x
GRE >
IDENFR y
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR x
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR y
RPARENT )
SEMICN ;
RBRACE }
RBRACE }
CHARTK char
IDENFR GetCharFunc
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR x
GEQ >=
INTCON 0
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
CHARCON a
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
LPARENT (
CHARCON b
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR variable_num1
COMMA ,
IDENFR variable_num2
COMMA ,
IDENFR variable_num3
COMMA ,
IDENFR variable_NumArray1
LBRACK [
INTCON 5
RBRACK ]
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 5
RBRACK ]
LBRACK [
INTCON 5
RBRACK ]
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR j
ASSIGN =
PLUS +
INTCON 3
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
PLUS +
INTCON 0
SEMICN ;
INTTK int
IDENFR fixed_NumArray1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
COMMA ,
INTCON 2
COMMA ,
INTCON 4
COMMA ,
INTCON 6
COMMA ,
INTCON 8
RBRACE }
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR variable_num1
RPARENT )
SEMICN ;
SCANFTK scanf
LPARENT (
IDENFR variable_num2
RPARENT )
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LEQ <=
INTCON 4
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
SWITCHTK switch
LPARENT (
IDENFR i
RPARENT )
LBRACE {
CASETK case
INTCON 0
COLON :
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
CASETK case
INTCON 1
COLON :
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR variable_NumArray2
LBRACK [
INTCON 1
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
CASETK case
INTCON 2
COLON :
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR variable_NumArray2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
CASETK case
INTCON 3
COLON :
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR variable_NumArray2
LBRACK [
INTCON 3
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
DEFAULTTK default
COLON :
LBRACE {
FORTK for
LPARENT (
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
LSS <
INTCON 5
SEMICN ;
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR variable_NumArray2
LBRACK [
INTCON 4
RBRACK ]
LBRACK [
IDENFR j
RBRACK ]
ASSIGN =
IDENFR fixed_NumArray1
LBRACK [
IDENFR j
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
PRINTFTK printf
LPARENT (
STRCON 18373039
RPARENT )
SEMICN ;
WHILETK while
LPARENT (
IDENFR k
LSS <
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
IDENFR variable_NumArray2
LBRACK [
IDENFR k
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR k
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR printFunc1
LPARENT (
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
COMMA ,
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 3
RBRACK ]
RPARENT )
SEMICN ;
IDENFR printFunc1
LPARENT (
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
MINU -
IDENFR variable_NumArray2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 4
RBRACK ]
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON hellow
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON go,
COMMA ,
IDENFR variable_num1
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
